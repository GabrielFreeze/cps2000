#include "lexer.hpp"

Lexer::Lexer() {

    //TRANSITIONSxSTATES:             START              A                B                C                D                E                F              EMPTY             ID           OPEN_BRACKET     CLOSE_BRACKET     OPEN_CURLY       CLOSE_CURLY      SEMICOLON          COLON            COMMA            EQUAL             NUM             CONST           MULOP_A          MULOP_B          ADDOP_A           ADDOP_B          RELOP_A          RELOP_B          RELOP_C          ARROW           COMMENT
    dfa =/*LETTER          :*/ {{S_ID           , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*LETTER          :*/
         /*DIGIT           :*/  {S_NUM          , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*DIGIT           :*/
         /*ASCII_OTHER     :*/  {S_EMPTY        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*ASCII_OTHER     :*/
         /*OPEN_BRACKET    :*/  {S_OPEN_BRACKET , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*OPEN_BRACKET    :*/
         /*CLOSE_BRACKET   :*/  {S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*CLOSE_BRACKET   :*/
         /*OPEN_CURLY      :*/  {S_OPEN_CURLY   , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*OPEN_CURLY      :*/
         /*CLOSE_CURLY     :*/  {S_CLOSE_CURLY  , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*CLOSE_CURLY     :*/
         /*SEMICOLON       :*/  {S_SEMICOLON    , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*SEMICOLON       :*/
         /*COLON           :*/  {S_COLON        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*COLON           :*/
         /*COMMA           :*/  {S_COMMA        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*COMMA           :*/
         /*QUOTE           :*/  {S_A            , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*QUOTE           :*/
         /*EQUAL           :*/  {S_EQUAL        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*EQUAL           :*/
         /*PERIOD          :*/  {S_EMPTY        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*PERIOD          :*/
         /*BANG!           :*/  {S_G            , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*BANG!           :*/
         /*DIV             :*/  {S_MULOP_A      , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*DIV             :*/
         /*MUL             :*/  {S_MULOP_B      , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*MUL             :*/
         /*ADD             :*/  {S_ADDOP_A      , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*ADD             :*/
         /*SUB             :*/  {S_ADDOP_B      , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*SUB             :*/
         /*LESS            :*/  {S_RELOP_A      , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*LESS            :*/
         /*GREATER         :*/  {S_RELOP_B      , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*GREATER         :*/
         /*TRANS_UNDERSCORE:*/  {S_ID           , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*TRANS_UNDERSCORE:*/
         /*TAB             :*/  {S_START        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*TAB             :*/
         /*NEWLINE         :*/  {S_START        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}, /*NEWLINE         :*/
         /*SPACE           :*/  {S_START        , S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET, S_CLOSE_BRACKET}};/*SPACE           :*/
    //TRANSITIONSxSTATES:             START              A                B                C                D                E                F              EMPTY             ID           OPEN_BRACKET     CLOSE_BRACKET     OPEN_CURLY       CLOSE_CURLY      SEMICOLON          COLON            COMMA            EQUAL             NUM             CONST           MULOP_A          MULOP_B          ADDOP_A           ADDOP_B          RELOP_A          RELOP_B          RELOP_C          ARROW           COMMENT     


    keywords = {"for", "while", "if", "else", "let", "print", "return", "fn",
                "true", "false", "and", "or", "not", "float", "int", "bool","char"};
   
}



lexer_cat Lexer::getCat(char x) {
    
    if ((65 <= x && x <= 90) || (97 <= x && x <= 122))
        return CAT_LETTER;
    else if (48 <= x && x <= 57)
        return CAT_DIGIT;
    else if (0x20 <= x && x <= 0x7E)
        return CAT_ASCII_OTHER; //Everything in the printable range that is not LETTER of DIGIT.
    
    return CAT_NONE;
}